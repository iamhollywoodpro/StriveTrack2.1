{
  "version": 3,
  "sources": ["../bundle-DtnAdk/checked-fetch.js", "../bundle-DtnAdk/strip-cf-connecting-ip-header.js", "../../../node_modules/hono/dist/compose.js", "../../../node_modules/hono/dist/request/constants.js", "../../../node_modules/hono/dist/utils/body.js", "../../../node_modules/hono/dist/utils/url.js", "../../../node_modules/hono/dist/request.js", "../../../node_modules/hono/dist/utils/html.js", "../../../node_modules/hono/dist/context.js", "../../../node_modules/hono/dist/router.js", "../../../node_modules/hono/dist/utils/constants.js", "../../../node_modules/hono/dist/hono-base.js", "../../../node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/hono/dist/hono.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-DtnAdk/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-DtnAdk/middleware-loader.entry.ts"],
  "sourceRoot": "/home/user/webapp/media-worker/.wrangler/tmp/dev-J9UR8i",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\"/\", url.indexOf(\":\") + 4);\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param && /\\%/.test(param) ? tryDecodeURIComponent(param) : param;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value !== void 0) {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "import { Hono } from 'hono'\n\n// Bindings interface\nexport type Bindings = {\n  R2_BUCKET: R2Bucket\n  DB: D1Database\n  SUPABASE_URL: string\n  SUPABASE_ANON_KEY: string\n}\n\n// Admin email list\nconst ADMIN_EMAILS = ['iamhollywoodpro@protonmail.com', 'iamhollywoodpro@gmail.com']\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// --- Helpers ---\nconst withCORS = (resp: Response, origin: string, req?: Request) => {\n  const headers = new Headers(resp.headers)\n  headers.set('Access-Control-Allow-Origin', origin)\n  headers.set('Vary', 'Origin')\n  headers.set('Access-Control-Allow-Methods', 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS')\n  const reqHeaders = req?.headers?.get('access-control-request-headers')\n  headers.set('Access-Control-Allow-Headers', reqHeaders || 'authorization, content-type, x-file-name')\n  headers.set('Access-Control-Max-Age', '86400')\n  return new Response(resp.body, { status: resp.status, headers })\n}\n\nconst jsonCORS = (origin: string, obj: any, status = 200, extra: Record<string, string> = {}) => {\n  const headers = { 'Content-Type': 'application/json', ...extra }\n  return withCORS(new Response(JSON.stringify(obj), { status, headers }), origin)\n}\n\nfunction guessContentTypeFromKey(key: string): string | undefined {\n  const k = key.toLowerCase()\n  if (k.endsWith('.jpg') || k.endsWith('.jpeg')) return 'image/jpeg'\n  if (k.endsWith('.png')) return 'image/png'\n  if (k.endsWith('.webp')) return 'image/webp'\n  if (k.endsWith('.gif')) return 'image/gif'\n  if (k.endsWith('.mp4')) return 'video/mp4'\n  if (k.endsWith('.mov') || k.endsWith('.qt')) return 'video/quicktime'\n  if (k.endsWith('.webm')) return 'video/webm'\n  if (k.endsWith('.avi')) return 'video/x-msvideo'\n  if (k.endsWith('.3gp') || k.endsWith('.3gpp')) return 'video/3gpp'\n  if (k.endsWith('.flv')) return 'video/x-flv'\n  return undefined\n}\n\nasync function ensureTables(env: Bindings) {\n  // Create base tables first\n  const createStmts = [\n    `CREATE TABLE IF NOT EXISTS media (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      key TEXT NOT NULL,\n      content_type TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(user_id, key)\n    );`,\n    `CREATE TABLE IF NOT EXISTS nutrition_logs (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      meal_name TEXT,\n      meal_type TEXT,\n      calories INTEGER,\n      protein INTEGER,\n      carbs INTEGER,\n      fat INTEGER,\n      \"date\" TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS achievements (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      code TEXT NOT NULL,\n      points INTEGER NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(user_id, code)\n    );`,\n    `CREATE TABLE IF NOT EXISTS points_ledger (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      points INTEGER NOT NULL,\n      reason TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS habits (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      name TEXT NOT NULL,\n      emoji TEXT,\n      difficulty TEXT,\n      days_of_week TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS habit_logs (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      habit_id INTEGER NOT NULL,\n      user_id TEXT NOT NULL,\n      \"date\" TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS user_profiles (\n      user_id TEXT PRIMARY KEY,\n      name TEXT,\n      bio TEXT,\n      targets TEXT,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS goals (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      title TEXT NOT NULL,\n      description TEXT,\n      target_date TEXT,\n      progress INTEGER DEFAULT 0,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS social_posts (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id TEXT NOT NULL,\n      content TEXT NOT NULL,\n      post_type TEXT DEFAULT 'progress',\n      media_url TEXT,\n      tags TEXT,\n      likes_count INTEGER DEFAULT 0,\n      comments_count INTEGER DEFAULT 0,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS social_comments (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      post_id INTEGER NOT NULL,\n      user_id TEXT NOT NULL,\n      content TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (post_id) REFERENCES social_posts(id)\n    );`,\n    `CREATE TABLE IF NOT EXISTS social_likes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      post_id INTEGER NOT NULL,\n      user_id TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(post_id, user_id),\n      FOREIGN KEY (post_id) REFERENCES social_posts(id)\n    );`,\n    `CREATE TABLE IF NOT EXISTS friendships (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      requester_id TEXT NOT NULL,\n      addressee_id TEXT NOT NULL,\n      status TEXT DEFAULT 'pending',\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(requester_id, addressee_id)\n    );`,\n    `CREATE TABLE IF NOT EXISTS friend_challenges (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      challenger_id TEXT NOT NULL,\n      challenged_id TEXT NOT NULL,\n      challenge_type TEXT NOT NULL,\n      title TEXT NOT NULL,\n      description TEXT,\n      target_value INTEGER,\n      start_date TEXT,\n      end_date TEXT,\n      status TEXT DEFAULT 'active',\n      winner_id TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS chat_messages (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      sender_id TEXT NOT NULL,\n      recipient_id TEXT NOT NULL,\n      message TEXT NOT NULL,\n      is_read BOOLEAN DEFAULT FALSE,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`,\n    `CREATE TABLE IF NOT EXISTS user_stats (\n      user_id TEXT PRIMARY KEY,\n      total_posts INTEGER DEFAULT 0,\n      total_friends INTEGER DEFAULT 0,\n      total_likes_received INTEGER DEFAULT 0,\n      total_challenges_won INTEGER DEFAULT 0,\n      streak_days INTEGER DEFAULT 0,\n      last_activity DATETIME DEFAULT CURRENT_TIMESTAMP\n    );`\n  ]\n\n  // Execute base table creation\n  for (const sql of createStmts) {\n    try { await env.DB.prepare(sql).run() } catch (_) {}\n  }\n\n  // Add new columns to existing nutrition_logs table (safe to run multiple times)\n  const alterStmts = [\n    `ALTER TABLE nutrition_logs ADD COLUMN fiber INTEGER DEFAULT 0`,\n    `ALTER TABLE nutrition_logs ADD COLUMN sugar INTEGER DEFAULT 0`, \n    `ALTER TABLE nutrition_logs ADD COLUMN serving_size TEXT DEFAULT '1 serving'`,\n    `ALTER TABLE nutrition_logs ADD COLUMN food_image TEXT`,\n    `ALTER TABLE nutrition_logs ADD COLUMN food_id TEXT`,\n    `ALTER TABLE nutrition_logs ADD COLUMN category TEXT`,\n    `ALTER TABLE nutrition_logs ADD COLUMN addons TEXT`\n  ]\n\n  // Execute ALTER statements (ignore errors if columns already exist)\n  for (const sql of alterStmts) {\n    try { await env.DB.prepare(sql).run() } catch (_) {\n      // Column already exists or other error - ignore\n    }\n  }\n}\n\nasync function verifySupabaseToken(env: Bindings, token: string) {\n  if (!token) return null\n  try {\n    const res = await fetch(`${env.SUPABASE_URL}/auth/v1/user`, {\n      headers: { Authorization: `Bearer ${token}`, apikey: env.SUPABASE_ANON_KEY }\n    })\n    if (!res.ok) return null\n    const user = await res.json()\n    return user // { id, email, ... }\n  } catch (_) {\n    return null\n  }\n}\n\napp.options('*', (c) => {\n  const origin = c.req.header('origin') || '*'\n  return withCORS(new Response(null, { status: 204 }), origin, c.req.raw)\n})\n\n// Root info route\napp.get('/', (c) => {\n  const origin = c.req.header('origin') || '*'\n  const body = 'StriveTrack Media API is running. Try /api/health'\n  return withCORS(new Response(body, { status: 200 }), origin, c.req.raw)\n})\n\n// Health check\napp.get('/api/health', (c) => {\n  const origin = c.req.header('origin') || '*'\n  return jsonCORS(origin, { ok: true, ts: Date.now() })\n})\n\n// ---------------- Media ----------------\n// POST /api/upload (Legacy endpoint for backward compatibility)\napp.post('/api/upload', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  if (!user?.id) return withCORS(new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 }), origin, c.req.raw)\n\n  await ensureTables(c.env)\n\n  const headerName = c.req.header('x-file-name') || 'upload.bin'\n  const sanitized = headerName.replace(/[^a-zA-Z0-9._-]/g, '_')\n  const key = `${userId}/progress/${Date.now()}-${Math.random().toString(36).substring(2, 15)}.${sanitized.split('.').pop()}`\n\n  const body = await c.req.arrayBuffer()\n  if (!body || body.byteLength === 0)\n    return withCORS(new Response(JSON.stringify({ error: 'Empty body' }), { status: 400 }), origin)\n\n  const contentType = c.req.header('content-type') || guessContentTypeFromKey(key) || 'application/octet-stream'\n  await c.env.R2_BUCKET.put(key, body, { httpMetadata: { contentType } })\n\n  // Index in D1 (best effort)\n  try {\n    await c.env.DB.prepare('INSERT INTO media (user_id, key, content_type) VALUES (?, ?, ?)')\n      .bind(userId, key, contentType)\n      .run()\n    // First upload achievement (+25)\n    try {\n      const ach = await c.env.DB.prepare('INSERT OR IGNORE INTO achievements (user_id, code, points) VALUES (?, ?, ?)')\n        .bind(userId, 'first_upload', 25).run()\n      // @ts-ignore\n      if (ach?.meta?.changes > 0) {\n        await c.env.DB.prepare('INSERT INTO points_ledger (user_id, points, reason) VALUES (?, ?, ?)')\n          .bind(userId, 25, 'first_upload').run()\n      }\n    } catch (_) {}\n  } catch (_) {}\n\n  return withCORS(new Response(JSON.stringify({ key }), { status: 200, headers: { 'Content-Type': 'application/json' } }), origin, c.req.raw)\n})\n\n// POST /api/upload/presigned - Generate presigned URL for direct R2 upload\napp.post('/api/upload/presigned', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { fileName, fileType, fileSize, fileKey } = body\n    \n    if (!fileName || !fileType || !fileKey) {\n      return jsonCORS(origin, { error: 'Missing required fields: fileName, fileType, fileKey' }, 400)\n    }\n\n    // Generate presigned POST URL for R2\n    const presignedUrl = `https://${c.env.R2_BUCKET.accountId}.r2.cloudflarestorage.com/${c.env.R2_BUCKET.name}`\n    \n    // For Cloudflare R2, we'll use the direct upload endpoint instead\n    // Since R2 doesn't support presigned POST like S3, we'll return a simplified response\n    return jsonCORS(origin, {\n      url: presignedUrl,\n      fields: {\n        key: fileKey,\n        'Content-Type': fileType\n      },\n      key: fileKey\n    })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'Failed to generate presigned URL' }, 500)\n  }\n})\n\n// POST /api/upload/worker - Worker proxy upload (multipart form data)\napp.post('/api/upload/worker', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  \n  try {\n    console.log('\uD83D\uDCC1 Worker upload started')\n    \n    const auth = c.req.header('authorization') || ''\n    const url = new URL(c.req.url)\n    const qToken = url.searchParams.get('token') || ''\n    const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n    \n    console.log('\uD83D\uDD10 Token validation...')\n    const user = await verifySupabaseToken(c.env, token)\n    if (!user?.id) {\n      console.log('\u274C Authentication failed')\n      return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n    }\n    \n    console.log('\u2705 User authenticated:', userId)\n    await ensureTables(c.env)\n\n    console.log('\uD83D\uDCC4 Processing form data...')\n    const formData = await c.req.formData()\n    const file = formData.get('file') as File\n    const fileName = formData.get('fileName') as string || file?.name || 'upload.bin'\n    const fileType = formData.get('fileType') as string || file?.type || 'application/octet-stream'\n\n    if (!file) {\n      console.log('\u274C No file provided')\n      return jsonCORS(origin, { error: 'No file provided' }, 400)\n    }\n    \n    console.log('\uD83D\uDCCA File info:', { name: fileName, type: fileType, size: file.size })\n\n    // Generate unique file key\n    const timestamp = Date.now()\n    const randomId = Math.random().toString(36).substring(2, 15)\n    const fileExtension = fileName.split('.').pop()\n    const key = `${userId}/progress/${timestamp}-${randomId}.${fileExtension}`\n    \n    console.log('\uD83D\uDDDD\uFE0F Generated key:', key)\n\n    // Upload to R2\n    console.log('\u2601\uFE0F Uploading to R2...')\n    const buffer = await file.arrayBuffer()\n    await c.env.R2_BUCKET.put(key, buffer, { \n      httpMetadata: { \n        contentType: fileType,\n        contentLength: buffer.byteLength.toString()\n      } \n    })\n    console.log('\u2705 R2 upload complete')\n\n    // Index in D1\n    console.log('\uD83D\uDDC3\uFE0F Indexing in D1...')\n    try {\n      await c.env.DB.prepare('INSERT OR REPLACE INTO media (user_id, key, content_type) VALUES (?, ?, ?)')\n        .bind(userId, key, fileType)\n        .run()\n      \n      // First upload achievement\n      try {\n        const ach = await c.env.DB.prepare('INSERT OR IGNORE INTO achievements (user_id, code, points) VALUES (?, ?, ?)')\n          .bind(userId, 'first_upload', 25).run()\n        // @ts-ignore\n        if (ach?.meta?.changes > 0) {\n          await c.env.DB.prepare('INSERT INTO points_ledger (user_id, points, reason) VALUES (?, ?, ?)')\n            .bind(userId, 25, 'first_upload').run()\n        }\n      } catch (_) {}\n    } catch (_) {}\n    console.log('\u2705 D1 indexing complete')\n\n    console.log('\uD83C\uDF89 Upload successful!', { key })\n    return jsonCORS(origin, { key, success: true })\n  } catch (e: any) {\n    console.error('\u274C Worker upload error:', e.message)\n    console.error('Stack:', e.stack)\n    return jsonCORS(origin, { error: e?.message || 'Worker upload failed' }, 500)\n  }\n})\n\n// POST /api/upload/chunked - Chunked upload for large files\napp.post('/api/upload/chunked', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const formData = await c.req.formData()\n    const chunk = formData.get('chunk') as File\n    const chunkIndex = parseInt(formData.get('chunkIndex') as string)\n    const totalChunks = parseInt(formData.get('totalChunks') as string)\n    const uploadId = formData.get('uploadId') as string\n    const fileName = formData.get('fileName') as string\n    const fileType = formData.get('fileType') as string\n\n    if (!chunk || isNaN(chunkIndex) || isNaN(totalChunks) || !uploadId) {\n      return jsonCORS(origin, { error: 'Missing required chunk data' }, 400)\n    }\n\n    // Store chunk temporarily (for now, just return success)\n    // In a real implementation, you'd store chunks in R2 with temporary keys\n    // and assemble them in the finalize endpoint\n    \n    return jsonCORS(origin, { \n      success: true, \n      chunkIndex, \n      totalChunks, \n      uploadId,\n      message: `Chunk ${chunkIndex + 1}/${totalChunks} received`\n    })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'Chunked upload failed' }, 500)\n  }\n})\n\n// POST /api/upload/chunked/finalize - Finalize chunked upload\napp.post('/api/upload/chunked/finalize', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { uploadId, fileName, fileType, totalSize, chunks } = body\n\n    if (!uploadId || !fileName || !fileType) {\n      return jsonCORS(origin, { error: 'Missing required finalization data' }, 400)\n    }\n\n    // For now, since chunked upload is complex to implement properly in R2,\n    // we'll fall back to the worker upload method\n    return jsonCORS(origin, { error: 'Chunked upload not fully implemented, use worker upload instead' }, 501)\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'Chunked finalization failed' }, 500)\n  }\n})\n\n// POST /api/upload/base64 - Base64 upload (last resort)\napp.post('/api/upload/base64', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { fileName, fileType, fileSize, data } = body\n\n    if (!fileName || !fileType || !data) {\n      return jsonCORS(origin, { error: 'Missing required fields: fileName, fileType, data' }, 400)\n    }\n\n    // Parse base64 data\n    const base64Data = data.split(',')[1] || data // Remove data:image/jpeg;base64, prefix if present\n    const binaryData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0))\n\n    // Generate unique file key\n    const timestamp = Date.now()\n    const randomId = Math.random().toString(36).substring(2, 15)\n    const fileExtension = fileName.split('.').pop()\n    const key = `${userId}/progress/${timestamp}-${randomId}.${fileExtension}`\n\n    // Upload to R2\n    await c.env.R2_BUCKET.put(key, binaryData, { \n      httpMetadata: { \n        contentType: fileType,\n        contentLength: binaryData.length.toString()\n      } \n    })\n\n    // Index in D1\n    try {\n      await c.env.DB.prepare('INSERT OR REPLACE INTO media (user_id, key, content_type) VALUES (?, ?, ?)')\n        .bind(userId, key, fileType)\n        .run()\n      \n      // First upload achievement\n      try {\n        const ach = await c.env.DB.prepare('INSERT OR IGNORE INTO achievements (user_id, code, points) VALUES (?, ?, ?)')\n          .bind(userId, 'first_upload', 25).run()\n        // @ts-ignore\n        if (ach?.meta?.changes > 0) {\n          await c.env.DB.prepare('INSERT INTO points_ledger (user_id, points, reason) VALUES (?, ?, ?)')\n            .bind(userId, 25, 'first_upload').run()\n        }\n      } catch (_) {}\n    } catch (_) {}\n\n    return jsonCORS(origin, { key, success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'Base64 upload failed' }, 500)\n  }\n})\n\n// GET /api/media\napp.get('/api/media', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  // Use R2 as source of truth, sync with D1\n  const list = await c.env.R2_BUCKET.list({ prefix: `${userId}/`, limit: 1000 })\n  const itemsR2 = (list.objects || []).map((o: any) => {\n    const ct = o.httpMetadata?.contentType || guessContentTypeFromKey(o.key)\n    return {\n      key: o.key,\n      contentType: ct,\n      createdAt: (o.uploaded ? new Date(o.uploaded).toISOString() : undefined),\n      url: `${new URL(c.req.url).origin}/api/media/${encodeURIComponent(o.key)}?token=${encodeURIComponent(token)}`\n    }\n  })\n  \n  // Sync D1 with R2 truth: remove stale entries and add missing ones\n  try {\n    // Clear all existing D1 entries for this user\n    await c.env.DB.prepare('DELETE FROM media WHERE user_id = ?').bind(userId).run()\n    \n    // Re-populate with actual R2 files\n    for (const it of itemsR2) {\n      await c.env.DB.prepare('INSERT INTO media (user_id, key, content_type) VALUES (?, ?, ?)')\n        .bind(userId, it.key, it.contentType || null).run()\n    }\n  } catch (e) {\n    // D1 sync error (non-critical)\n  }\n  \n  return jsonCORS(origin, { items: itemsR2 })\n})\n\n// GET /api/media/*\napp.get('/api/media/*', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  // Extract object key from URL path\n  const fullPath = c.req.path\n  let objectKey = fullPath.replace('/api/media/', '')\n  try { \n    objectKey = decodeURIComponent(objectKey) \n  } catch (_) {}\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  if (!user?.id) return withCORS(new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 }), origin, c.req.raw)\n\n  await ensureTables(c.env)\n\n  const isAdmin = user.email === 'iamhollywoodpro@protonmail.com' || user.email === 'iamhollywoodpro@gmail.com'\n  const ownerPrefix = `${userId}/`\n  const isOwnerPath = objectKey.startsWith(ownerPrefix)\n  let allowed = isOwnerPath || isAdmin\n  if (!allowed) {\n    try {\n      const row = await c.env.DB.prepare('SELECT 1 as ok FROM media WHERE user_id = ? AND key = ? LIMIT 1')\n        .bind(userId, objectKey).first<any>()\n      if (row?.ok === 1) allowed = true\n    } catch (_) {}\n  }\n  if (!allowed) return withCORS(new Response(JSON.stringify({ error: 'Forbidden' }), { status: 403 }), origin)\n\n  const obj = await c.env.R2_BUCKET.get(objectKey)\n  if (!obj) return withCORS(new Response(JSON.stringify({ error: 'Not found' }), { status: 404 }), origin)\n  const guessed = guessContentTypeFromKey(objectKey)\n  const headers = new Headers({ 'Content-Type': obj.httpMetadata?.contentType || guessed || 'application/octet-stream' })\n  headers.set('Access-Control-Allow-Origin', origin)\n  return withCORS(new Response(obj.body, { headers }), origin, c.req.raw)\n})\n\n// DELETE /api/media/*\napp.delete('/api/media/*', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  // Extract object key from URL path\n  const fullPath = c.req.path\n  let objectKey = fullPath.replace('/api/media/', '')\n  try { \n    objectKey = decodeURIComponent(objectKey) \n  } catch (_) {}\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  if (!user?.id) return withCORS(new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 }), origin, c.req.raw)\n\n  await ensureTables(c.env)\n\n  const isAdmin = user.email === 'iamhollywoodpro@protonmail.com' || user.email === 'iamhollywoodpro@gmail.com'\n  const ownerPrefix = `${userId}/`\n  const isOwnerPath = objectKey.startsWith(ownerPrefix)\n  let allowed = isOwnerPath || isAdmin\n  if (!allowed) {\n    try {\n      const row = await c.env.DB.prepare('SELECT 1 as ok FROM media WHERE user_id = ? AND key = ? LIMIT 1')\n        .bind(userId, objectKey).first<any>()\n      if (row?.ok === 1) allowed = true\n    } catch (_) {}\n  }\n  if (!allowed) return withCORS(new Response(JSON.stringify({ error: 'Forbidden' }), { status: 403 }), origin)\n\n  await c.env.R2_BUCKET.delete(objectKey)\n  try { await c.env.DB.prepare('DELETE FROM media WHERE user_id = ? AND key = ?').bind(userId, objectKey).run() } catch (_) {}\n  return withCORS(new Response(JSON.stringify({ success: true }), { status: 200, headers: { 'Content-Type': 'application/json' } }), origin, c.req.raw)\n})\n\n// ---------------- Goals ----------------\napp.get('/api/goals', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    // Try production schema first (status column, not progress)\n    const rs = await c.env.DB\n      .prepare('SELECT id, title, description, target_date, status as progress, created_at FROM goals WHERE user_id = ? ORDER BY created_at DESC')\n      .bind(userId)\n      .all()\n    return jsonCORS(origin, { items: rs.results || [] })\n  } catch (e: any) {\n    const msg = (e?.message || '').toLowerCase()\n    // Fallback: Handle local development schema (progress column)\n    if (msg.includes('no such column: status')) {\n      try {\n        // Use local development schema with progress column\n        const rs2 = await c.env.DB\n          .prepare('SELECT id, title, description, target_date, progress, created_at FROM goals WHERE user_id = ? ORDER BY created_at DESC')\n          .bind(userId)\n          .all()\n        return jsonCORS(origin, { items: rs2.results || [] })\n      } catch (e2: any) {\n        return jsonCORS(origin, { error: e2?.message || 'DB error' }, 500)\n      }\n    }\n    if (msg.includes('no such column: target_date')) {\n      try {\n        await c.env.DB.prepare('ALTER TABLE goals ADD COLUMN target_date TEXT').run()\n        const rs2 = await c.env.DB\n          .prepare('SELECT id, title, description, target_date, progress, created_at FROM goals WHERE user_id = ? ORDER BY created_at DESC')\n          .bind(userId)\n          .all()\n        return jsonCORS(origin, { items: rs2.results || [] })\n      } catch (e2: any) {\n        return jsonCORS(origin, { error: e2?.message || 'DB error' }, 500)\n      }\n    }\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.post('/api/goals', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const body = await c.req.json().catch(() => ({} as any))\n  const title = (body.title || '').toString().trim()\n  const description = body.description ?? null\n  const target_date = body.target_date ?? null\n  if (!title) return jsonCORS(origin, { error: 'Title required' }, 400)\n  try {\n    // Use production schema directly (with status and explicit timestamps)\n    const now = Date.now()\n    await c.env.DB\n      .prepare('INSERT INTO goals (user_id, title, description, target_date, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?)')\n      .bind(userId, title, description, target_date, 'active', now, now)\n      .run()\n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    const msg = (e?.message || '').toLowerCase()\n    // Fallback: Try local development schema with progress column\n    if (msg.includes('no column named status') || msg.includes('no such column: status')) {\n      try {\n        await c.env.DB\n          .prepare('INSERT INTO goals (user_id, title, description, target_date, progress) VALUES (?, ?, ?, ?, 0)')\n          .bind(userId, title, description, target_date)\n          .run()\n        return jsonCORS(origin, { success: true })\n      } catch (e2: any) {\n        return jsonCORS(origin, { error: e2?.message || 'DB error' }, 500)\n      }\n    }\n    if (msg.includes('no column named target_date') || msg.includes('no such column: target_date')) {\n      try {\n        await c.env.DB.prepare('ALTER TABLE goals ADD COLUMN target_date TEXT').run()\n        await c.env.DB\n          .prepare('INSERT INTO goals (user_id, title, description, target_date, progress) VALUES (?, ?, ?, ?, 0)')\n          .bind(userId, title, description, target_date)\n          .run()\n        return jsonCORS(origin, { success: true })\n      } catch (e2: any) {\n        return jsonCORS(origin, { error: e2?.message || 'DB error' }, 500)\n      }\n    }\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.delete('/api/goals/:id', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n  const id = Number(c.req.param('id'))\n  if (!id) return jsonCORS(origin, { error: 'Invalid id' }, 400)\n  try {\n    await c.env.DB.prepare('DELETE FROM goals WHERE id = ? AND user_id = ?').bind(id, userId).run()\n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// ---------------- Habits ----------------\napp.get('/api/habits', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const from = url.searchParams.get('from')\n  const to = url.searchParams.get('to')\n  try {\n    const habits = await c.env.DB\n      .prepare('SELECT id, name, emoji, difficulty, days_of_week, created_at FROM habits WHERE user_id = ? ORDER BY created_at DESC')\n      .bind(userId)\n      .all()\n\n    if (from && to) {\n      const logs = await c.env.DB\n        .prepare('SELECT habit_id, \"date\" as date FROM habit_logs WHERE user_id = ? AND \"date\" BETWEEN ? AND ? ORDER BY \"date\" DESC')\n        .bind(userId, from, to)\n        .all()\n      return jsonCORS(origin, { items: habits.results || [], logs: logs.results || [] })\n    }\n    return jsonCORS(origin, { items: habits.results || [] })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.post('/api/habits', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const body = await c.req.json().catch(() => ({} as any))\n  const name = (body.name || '').toString().trim()\n  if (!name) return jsonCORS(origin, { error: 'Name required' }, 400)\n  const emoji = body.emoji || '\uD83D\uDCAA'\n  const difficulty = body.difficulty || 'Medium'\n  const days = Array.isArray(body.days_of_week) ? JSON.stringify(body.days_of_week) : JSON.stringify([0,1,2,3,4,5,6])\n  try {\n    await c.env.DB\n      .prepare('INSERT INTO habits (user_id, name, emoji, difficulty, days_of_week) VALUES (?, ?, ?, ?, ?)')\n      .bind(userId, name, emoji, difficulty, days)\n      .run()\n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.post('/api/habits/:id/log', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const habitId = Number(c.req.param('id'))\n  if (!habitId) return jsonCORS(origin, { error: 'Invalid habit id' }, 400)\n\n  const body = await c.req.json().catch(() => ({} as any))\n  const date = (body.date || '').toString().slice(0, 10)\n  const remove = !!body.remove\n  if (!date) return jsonCORS(origin, { error: 'date required (YYYY-MM-DD)' }, 400)\n  try {\n    if (remove) {\n      await c.env.DB.prepare('DELETE FROM habit_logs WHERE habit_id = ? AND user_id = ? AND \"date\" = ?')\n        .bind(habitId, userId, date).run()\n      return jsonCORS(origin, { success: true, removed: true })\n    } else {\n      await c.env.DB.prepare('INSERT INTO habit_logs (habit_id, user_id, \"date\") VALUES (?, ?, ?)')\n        .bind(habitId, userId, date).run()\n      // first_habit_log achievement\n      try {\n        const ach = await c.env.DB.prepare('INSERT OR IGNORE INTO achievements (user_id, code, points) VALUES (?, ?, ?)')\n          .bind(userId, 'first_habit_log', 10).run()\n        // @ts-ignore\n        if (ach?.meta?.changes > 0) {\n          await c.env.DB.prepare('INSERT INTO points_ledger (user_id, points, reason) VALUES (?, ?, ?)')\n            .bind(userId, 10, 'first_habit_log').run()\n        }\n      } catch (_) {}\n      return jsonCORS(origin, { success: true, removed: false })\n    }\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.delete('/api/habits/:id', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n  const habitId = Number(c.req.param('id'))\n  if (!habitId) return jsonCORS(origin, { error: 'Invalid habit id' }, 400)\n  try {\n    await c.env.DB.prepare('DELETE FROM habit_logs WHERE habit_id = ? AND user_id = ?').bind(habitId, userId).run()\n    await c.env.DB.prepare('DELETE FROM habits WHERE id = ? AND user_id = ?').bind(habitId, userId).run()\n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// ---------------- Nutrition ----------------\napp.get('/api/nutrition', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const date = (url.searchParams.get('date') || '').slice(0, 10)\n  if (!date) return jsonCORS(origin, { error: 'date required (YYYY-MM-DD)' }, 400)\n  try {\n    const rs = await c.env.DB\n      .prepare('SELECT id, meal_name, meal_type, calories, protein, carbs, fat, fiber, sugar, serving_size, food_image, food_id, category, addons, \"date\" FROM nutrition_logs WHERE user_id = ? AND \"date\" = ? ORDER BY id ASC')\n      .bind(userId, date)\n      .all()\n    return jsonCORS(origin, { items: rs.results || [] })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.post('/api/nutrition', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const body = await c.req.json().catch(() => ({} as any))\n  const date = (body.date || '').toString().slice(0, 10)\n  if (!date) return jsonCORS(origin, { error: 'date required (YYYY-MM-DD)' }, 400)\n  const meal_name = (body.meal_name || '').toString()\n  const meal_type = (body.meal_type || 'snacks').toString()\n  const calories = Number(body.calories || 0)\n  const protein = Number(body.protein || 0)\n  const carbs = Number(body.carbs || 0)\n  const fat = Number(body.fat || 0)\n  const fiber = Number(body.fiber || 0)\n  const sugar = Number(body.sugar || 0)\n  const serving_size = (body.serving_size || '1 serving').toString()\n  const food_image = (body.food_image || '').toString()\n  const food_id = (body.food_id || '').toString()\n  const category = (body.category || '').toString()\n  const addons = (body.addons || '').toString()\n  try {\n    await c.env.DB\n      .prepare('INSERT INTO nutrition_logs (user_id, meal_name, meal_type, calories, protein, carbs, fat, fiber, sugar, serving_size, food_image, food_id, category, addons, \"date\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)')\n      .bind(userId, meal_name, meal_type, calories, protein, carbs, fat, fiber, sugar, serving_size, food_image, food_id, category, addons, date)\n      .run()\n    // first_nutrition_entry achievement\n    try {\n      const ach = await c.env.DB.prepare('INSERT OR IGNORE INTO achievements (user_id, code, points) VALUES (?, ?, ?)')\n        .bind(userId, 'first_nutrition_entry', 10).run()\n      // @ts-ignore\n      if (ach?.meta?.changes > 0) {\n        await c.env.DB.prepare('INSERT INTO points_ledger (user_id, points, reason) VALUES (?, ?, ?)')\n          .bind(userId, 10, 'first_nutrition_entry').run()\n      }\n    } catch (_) {}\n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\napp.delete('/api/nutrition/:id', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  const id = Number(c.req.param('id'))\n  if (!id) return jsonCORS(origin, { error: 'Invalid id' }, 400)\n  try {\n    await c.env.DB.prepare('DELETE FROM nutrition_logs WHERE id = ? AND user_id = ?').bind(id, userId).run()\n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// ---------------- Achievements ----------------\napp.get('/api/achievements', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const itemsRs = await c.env.DB\n      .prepare('SELECT id, code, points, created_at FROM achievements WHERE user_id = ? ORDER BY created_at DESC')\n      .bind(userId)\n      .all()\n    const pointsRs = await c.env.DB\n      .prepare('SELECT COALESCE(SUM(points), 0) as total FROM points_ledger WHERE user_id = ?')\n      .bind(userId)\n      .first<any>()\n    const items = (itemsRs.results || []).map((a: any) => ({\n      id: a.id,\n      code: a.code,\n      name: a.code,\n      description: a.code,\n      points: a.points || 0,\n      created_at: a.created_at\n    }))\n    const total_points = (pointsRs?.total as number) ?? 0\n    return jsonCORS(origin, { total_points, items })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// ---------------- Profile Endpoints ----------------\n// GET /api/profile\napp.get('/api/profile', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const profile = await c.env.DB\n      .prepare('SELECT user_id, name, bio, targets, updated_at FROM user_profiles WHERE user_id = ?')\n      .bind(userId)\n      .first()\n    \n    if (!profile) {\n      // Create default profile\n      const defaultProfile = {\n        user_id: userId,\n        name: user.email?.split('@')[0] || 'User',\n        bio: '',\n        targets: JSON.stringify({})\n      }\n      await c.env.DB\n        .prepare('INSERT INTO user_profiles (user_id, name, bio, targets) VALUES (?, ?, ?, ?)')\n        .bind(defaultProfile.user_id, defaultProfile.name, defaultProfile.bio, defaultProfile.targets)\n        .run()\n      return jsonCORS(origin, defaultProfile)\n    }\n    \n    return jsonCORS(origin, {\n      user_id: profile.user_id,\n      name: profile.name,\n      bio: profile.bio,\n      targets: profile.targets ? JSON.parse(profile.targets) : {},\n      updated_at: profile.updated_at\n    })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// PUT /api/profile\napp.put('/api/profile', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const name = body.name?.trim() || user.email?.split('@')[0] || 'User'\n    const bio = body.bio?.trim() || ''\n    const targets = body.targets ? JSON.stringify(body.targets) : '{}'\n    \n    await c.env.DB\n      .prepare('INSERT OR REPLACE INTO user_profiles (user_id, name, bio, targets, updated_at) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)')\n      .bind(userId, name, bio, targets)\n      .run()\n    \n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// ---------------- Admin Endpoints ----------------\n// Helper function to check if user is admin\nconst isAdminUser = (user: any) => {\n  return ADMIN_EMAILS.includes(user?.email || '')\n}\n\n// GET /api/admin/users\napp.get('/api/admin/users', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n  if (!isAdminUser(user)) return jsonCORS(origin, { error: 'Forbidden' }, 403)\n\n  await ensureTables(c.env)\n\n  try {\n    const users = await c.env.DB\n      .prepare('SELECT user_id, name, bio, targets, updated_at FROM user_profiles ORDER BY updated_at DESC')\n      .all()\n    \n    const userList = (users.results || []).map((u: any) => ({\n      id: u.user_id,\n      name: u.name,\n      bio: u.bio,\n      targets: u.targets ? JSON.parse(u.targets) : {},\n      updated_at: u.updated_at\n    }))\n    \n    return jsonCORS(origin, { users: userList })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// GET /api/admin/user/:id/profile\napp.get('/api/admin/user/:id/profile', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n  if (!isAdminUser(user)) return jsonCORS(origin, { error: 'Forbidden' }, 403)\n\n  const targetUserId = c.req.param('id')\n  await ensureTables(c.env)\n\n  try {\n    const profile = await c.env.DB\n      .prepare('SELECT user_id, name, bio, targets, updated_at FROM user_profiles WHERE user_id = ?')\n      .bind(targetUserId)\n      .first()\n    \n    if (!profile) return jsonCORS(origin, { error: 'User not found' }, 404)\n    \n    return jsonCORS(origin, {\n      user_id: profile.user_id,\n      name: profile.name,\n      bio: profile.bio,\n      targets: profile.targets ? JSON.parse(profile.targets) : {},\n      updated_at: profile.updated_at\n    })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// GET /api/admin/user/:id/media\napp.get('/api/admin/user/:id/media', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n  if (!isAdminUser(user)) return jsonCORS(origin, { error: 'Forbidden' }, 403)\n\n  const targetUserId = c.req.param('id')\n  await ensureTables(c.env)\n\n  try {\n    const media = await c.env.DB\n      .prepare('SELECT key, content_type as contentType, created_at as createdAt FROM media WHERE user_id = ? ORDER BY created_at DESC')\n      .bind(targetUserId)\n      .all()\n    \n    const items = (media.results || []).map((m: any) => ({\n      key: m.key,\n      contentType: m.contentType,\n      createdAt: m.createdAt,\n      url: `${new URL(c.req.url).origin}/api/admin/media/${encodeURIComponent(m.key)}?token=${encodeURIComponent(token)}`\n    }))\n    \n    return jsonCORS(origin, { media: items })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'DB error' }, 500)\n  }\n})\n\n// GET /api/admin/media/* - Admin stream media\napp.get('/api/admin/media/*', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  // Extract object key from URL path\n  const fullPath = c.req.path\n  let objectKey = fullPath.replace('/api/admin/media/', '')\n  try { \n    objectKey = decodeURIComponent(objectKey) \n  } catch (_) {}\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  if (!user?.id) return withCORS(new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 }), origin, c.req.raw)\n  if (!isAdminUser(user)) return withCORS(new Response(JSON.stringify({ error: 'Forbidden' }), { status: 403 }), origin, c.req.raw)\n\n  await ensureTables(c.env)\n\n  // Verify ownership via D1 (same as user endpoint but admin can access any)\n  let allowed = false\n  try {\n    const row = await c.env.DB.prepare('SELECT 1 as ok FROM media WHERE user_id = ? AND key = ? LIMIT 1')\n      .bind(userId, objectKey).first<any>()\n    if (row?.ok === 1) allowed = true\n  } catch (_) {}\n  \n  // Also check if admin is trying to access any media (allow if exists in D1)\n  if (!allowed) {\n    try {\n      const mediaRow = await c.env.DB.prepare('SELECT user_id FROM media WHERE key = ? LIMIT 1')\n        .bind(objectKey).first<any>()\n      if (mediaRow) allowed = true // Admin can access any existing media\n    } catch (_) {}\n  }\n  \n  if (!allowed) return withCORS(new Response(JSON.stringify({ error: 'Not found' }), { status: 404 }), origin)\n\n  const obj = await c.env.R2_BUCKET.get(objectKey)\n  if (!obj) return withCORS(new Response(JSON.stringify({ error: 'Not found' }), { status: 404 }), origin)\n  const guessed = guessContentTypeFromKey(objectKey)\n  const headers = new Headers({ 'Content-Type': obj.httpMetadata?.contentType || guessed || 'application/octet-stream' })\n  headers.set('Access-Control-Allow-Origin', origin)\n  return withCORS(new Response(obj.body, { headers }), origin, c.req.raw)\n})\n\n// DELETE /api/admin/media/* - Admin delete media\napp.delete('/api/admin/media/*', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  // Extract object key from URL path\n  const fullPath = c.req.path\n  let objectKey = fullPath.replace('/api/admin/media/', '')\n  try { \n    objectKey = decodeURIComponent(objectKey) \n  } catch (_) {}\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  if (!user?.id) return withCORS(new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 }), origin, c.req.raw)\n  if (!isAdminUser(user)) return withCORS(new Response(JSON.stringify({ error: 'Forbidden' }), { status: 403 }), origin, c.req.raw)\n\n  await ensureTables(c.env)\n\n  try {\n    // Delete from R2 first\n    await c.env.R2_BUCKET.delete(objectKey)\n    // Delete from D1\n    await c.env.DB.prepare('DELETE FROM media WHERE key = ?').bind(objectKey).run()\n    \n    return jsonCORS(origin, { success: true })\n  } catch (e: any) {\n    return jsonCORS(origin, { error: e?.message || 'Delete failed' }, 500)\n  }\n})\n\n// ================ SOCIAL & COMMUNITY FEATURES ================\n\n// POST /api/posts - Create a social post\napp.post('/api/posts', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { content, media_url, post_type = 'progress', tags = [], visibility = 'friends' } = body\n\n    if (!content?.trim()) {\n      return jsonCORS(origin, { error: 'Content is required' }, 400)\n    }\n\n    const now = new Date().toISOString()\n    const post = await c.env.DB.prepare(`\n      INSERT INTO social_posts (user_id, content, media_url, post_type, tags, visibility, created_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n      RETURNING *\n    `).bind(\n      userId, \n      content, \n      media_url || null, \n      post_type, \n      JSON.stringify(tags), \n      visibility, \n      now\n    ).first<any>()\n\n    // Award points for posting\n    await c.env.DB.prepare(`\n      INSERT INTO user_stats (user_id, total_points, posts_count)\n      VALUES (?, 5, 1)\n      ON CONFLICT(user_id) DO UPDATE SET\n        total_points = total_points + 5,\n        posts_count = posts_count + 1,\n        updated_at = ?\n    `).bind(userId, now).run()\n\n    return jsonCORS(origin, { \n      success: true, \n      post: {\n        ...post,\n        tags: JSON.parse(post.tags || '[]')\n      }\n    })\n  } catch (e: any) {\n    console.error('Post creation error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to create post' }, 500)\n  }\n})\n\n// GET /api/posts - Get social posts feed\napp.get('/api/posts', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const limit = parseInt(url.searchParams.get('limit') || '20')\n    const offset = parseInt(url.searchParams.get('offset') || '0')\n\n    // Get posts from friends and public posts\n    const posts = await c.env.DB.prepare(`\n      SELECT \n        p.*,\n        up.name as user_name,\n        up.bio as user_bio,\n        (SELECT COUNT(*) FROM social_likes WHERE post_id = p.id) as likes_count,\n        (SELECT COUNT(*) FROM social_comments WHERE post_id = p.id) as comments_count,\n        (SELECT COUNT(*) FROM social_likes WHERE post_id = p.id AND user_id = ?) as is_liked\n      FROM social_posts p\n      LEFT JOIN user_profiles up ON p.user_id = up.user_id\n      WHERE \n        p.visibility = 'public' \n        OR p.user_id = ?\n        OR EXISTS (\n          SELECT 1 FROM friendships f \n          WHERE ((f.requester_id = ? AND f.addressee_id = p.user_id) OR (f.addressee_id = ? AND f.requester_id = p.user_id))\n          AND f.status = 'accepted'\n        )\n      ORDER BY p.created_at DESC\n      LIMIT ? OFFSET ?\n    `).bind(userId, userId, userId, userId, limit, offset).all<any>()\n\n    const formattedPosts = posts.results?.map(post => ({\n      ...post,\n      tags: JSON.parse(post.tags || '[]'),\n      is_liked: post.is_liked > 0,\n      stats: {\n        likes: post.likes_count,\n        comments: post.comments_count,\n        shares: 0\n      }\n    })) || []\n\n    return jsonCORS(origin, { posts: formattedPosts })\n  } catch (e: any) {\n    console.error('Posts fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch posts' }, 500)\n  }\n})\n\n// POST /api/posts/:id/like - Like/unlike a post\napp.post('/api/posts/:id/like', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const postId = c.req.param('id')\n    \n    // Check if already liked\n    const existing = await c.env.DB.prepare(`\n      SELECT id FROM social_likes WHERE user_id = ? AND post_id = ?\n    `).bind(userId, postId).first<any>()\n\n    const now = new Date().toISOString()\n\n    if (existing) {\n      // Unlike\n      await c.env.DB.prepare(`\n        DELETE FROM social_likes WHERE user_id = ? AND post_id = ?\n      `).bind(userId, postId).run()\n      \n      return jsonCORS(origin, { success: true, action: 'unliked' })\n    } else {\n      // Like\n      await c.env.DB.prepare(`\n        INSERT INTO social_likes (user_id, post_id, created_at)\n        VALUES (?, ?, ?)\n      `).bind(userId, postId, now).run()\n\n      return jsonCORS(origin, { success: true, action: 'liked' })\n    }\n  } catch (e: any) {\n    console.error('Like error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to like post' }, 500)\n  }\n})\n\n// POST /api/posts/:id/comments - Add comment to post\napp.post('/api/posts/:id/comments', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const postId = c.req.param('id')\n    const body = await c.req.json()\n    const { content } = body\n\n    if (!content?.trim()) {\n      return jsonCORS(origin, { error: 'Comment content is required' }, 400)\n    }\n\n    const now = new Date().toISOString()\n    const comment = await c.env.DB.prepare(`\n      INSERT INTO social_comments (post_id, user_id, content, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?)\n      RETURNING *\n    `).bind(postId, userId, content, now, now).first<any>()\n\n    return jsonCORS(origin, { success: true, comment })\n  } catch (e: any) {\n    console.error('Comment error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to add comment' }, 500)\n  }\n})\n\n// GET /api/posts/:id/comments - Get comments for a post\napp.get('/api/posts/:id/comments', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const postId = c.req.param('id')\n    \n    const comments = await c.env.DB.prepare(`\n      SELECT \n        c.*,\n        up.name as user_name,\n        up.bio as user_bio\n      FROM social_comments c\n      LEFT JOIN user_profiles up ON c.user_id = up.user_id\n      WHERE c.post_id = ?\n      ORDER BY c.created_at ASC\n    `).bind(postId).all<any>()\n\n    return jsonCORS(origin, { comments: comments.results || [] })\n  } catch (e: any) {\n    console.error('Comments fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch comments' }, 500)\n  }\n})\n\n// ================ FRIENDS SYSTEM ================\n\n// POST /api/friends/invite - Send friend invitation\napp.post('/api/friends/invite', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { email, phone, message, invitee_name } = body\n\n    if (!email && !phone) {\n      return jsonCORS(origin, { error: 'Email or phone number required' }, 400)\n    }\n\n    // Get user's profile for personalized message\n    const userProfile = await c.env.DB.prepare(`\n      SELECT up.name as full_name\n      FROM user_profiles up\n      WHERE up.user_id = ?\n    `).bind(userId).first<any>()\n\n    const inviterName = userProfile?.full_name || 'A friend'\n\n    // Create compelling invitation message\n    const defaultMessage = `\uD83C\uDFCB\uFE0F\u200D\u2640\uFE0F Hey ${invitee_name || 'there'}! \n\n${inviterName} here - I've been absolutely crushing my fitness goals with StriveTrack and I had to share this with you! \uD83D\uDCAA\n\nThis isn't just another fitness app - it's a whole community where we:\n\u2728 Track our progress with beautiful visualizations\n\uD83C\uDFAF Challenge each other to stay motivated\n\uD83C\uDFC6 Celebrate wins together on our social feed\n\uD83D\uDCCA See real results with smart analytics\n\nI've already gained ${Math.floor(Math.random() * 50 + 10)} points this week and would love to have you join my fitness squad! \n\nReady to level up your fitness journey? Let's do this together! \uD83D\uDE80\n\nDownload StriveTrack: [app-link]\nJoin with code: ${userId.slice(0, 8).toUpperCase()}`\n\n    const finalMessage = message || defaultMessage\n\n    // Store invitation record\n    const now = new Date().toISOString()\n    const invitation = await c.env.DB.prepare(`\n      INSERT INTO friend_invitations (\n        inviter_id, email, phone, message, status, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, 'sent', ?, ?)\n      RETURNING *\n    `).bind(\n      userId,\n      email || null,\n      phone || null,\n      finalMessage,\n      now,\n      now\n    ).first<any>()\n\n    // Here you would integrate with email/SMS service\n    // For now, we'll just return the invitation details\n    \n    return jsonCORS(origin, { \n      success: true, \n      invitation,\n      message: finalMessage,\n      preview: 'Invitation created! In production, this would be sent via email/SMS.'\n    })\n  } catch (e: any) {\n    console.error('Invitation error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to send invitation' }, 500)\n  }\n})\n\n// POST /api/friends/add - Add friend by user ID or email\napp.post('/api/friends/add', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { friend_id, email } = body\n\n    let friendId = friend_id\n\n    // If email provided, find user by email\n    if (!friendId && email) {\n      const friendUser = await c.env.DB.prepare(`\n        SELECT id FROM users WHERE email = ?\n      `).bind(email).first<any>()\n      \n      if (!friendUser) {\n        return jsonCORS(origin, { error: 'User not found' }, 404)\n      }\n      friendId = friendUser.id\n    }\n\n    if (!friendId) {\n      return jsonCORS(origin, { error: 'Friend ID or email required' }, 400)\n    }\n\n    if (friendId === userId) {\n      return jsonCORS(origin, { error: 'Cannot add yourself as friend' }, 400)\n    }\n\n    // Check if friendship already exists\n    const existing = await c.env.DB.prepare(`\n      SELECT * FROM friendships \n      WHERE (user_id = ? AND friend_id = ?) OR (user_id = ? AND friend_id = ?)\n    `).bind(userId, friendId, friendId, userId).first<any>()\n\n    if (existing) {\n      return jsonCORS(origin, { error: 'Friendship already exists' }, 400)\n    }\n\n    const now = new Date().toISOString()\n    \n    // Create friendship (pending approval)\n    const friendship = await c.env.DB.prepare(`\n      INSERT INTO friendships (user_id, friend_id, status, created_at, updated_at)\n      VALUES (?, ?, 'pending', ?, ?)\n      RETURNING *\n    `).bind(userId, friendId, now, now).first<any>()\n\n    return jsonCORS(origin, { success: true, friendship })\n  } catch (e: any) {\n    console.error('Add friend error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to add friend' }, 500)\n  }\n})\n\n// POST /api/friends/:id/accept - Accept friend request\napp.post('/api/friends/:id/accept', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const friendshipId = c.req.param('id')\n    const now = new Date().toISOString()\n\n    // Update friendship status\n    const updated = await c.env.DB.prepare(`\n      UPDATE friendships \n      SET status = 'accepted', updated_at = ?\n      WHERE id = ? AND friend_id = ?\n      RETURNING *\n    `).bind(now, friendshipId, userId).first<any>()\n\n    if (!updated) {\n      return jsonCORS(origin, { error: 'Friendship request not found' }, 404)\n    }\n\n    // Create reciprocal friendship\n    await c.env.DB.prepare(`\n      INSERT INTO friendships (user_id, friend_id, status, created_at, updated_at)\n      VALUES (?, ?, 'accepted', ?, ?)\n    `).bind(userId, updated.user_id, now, now).run()\n\n    return jsonCORS(origin, { success: true, friendship: updated })\n  } catch (e: any) {\n    console.error('Accept friend error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to accept friend request' }, 500)\n  }\n})\n\n// GET /api/friends - Get user's friends list\napp.get('/api/friends', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const status = url.searchParams.get('status') || 'accepted'\n\n    const friends = await c.env.DB.prepare(`\n      SELECT \n        f.*,\n        up.name as friend_name,\n        up.bio as friend_bio,\n        us.total_points as friend_points,\n        us.last_active\n      FROM friendships f\n      LEFT JOIN user_profiles up ON f.addressee_id = up.user_id\n      LEFT JOIN user_stats us ON f.addressee_id = us.user_id\n      WHERE f.requester_id = ? AND f.status = ?\n      ORDER BY f.created_at DESC\n    `).bind(userId, status).all<any>()\n\n    return jsonCORS(origin, { friends: friends.results || [] })\n  } catch (e: any) {\n    console.error('Friends fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch friends' }, 500)\n  }\n})\n\n// ================ CHALLENGES SYSTEM ================\n\n// POST /api/challenges - Create a friend challenge\napp.post('/api/challenges', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { friend_id, challenge_type, title, description, target_value, duration_days = 7, points_reward = 50 } = body\n\n    if (!friend_id || !challenge_type || !title || !target_value) {\n      return jsonCORS(origin, { error: 'Missing required challenge fields' }, 400)\n    }\n\n    // Verify friendship exists\n    const friendship = await c.env.DB.prepare(`\n      SELECT 1 FROM friendships \n      WHERE user_id = ? AND friend_id = ? AND status = 'accepted'\n    `).bind(userId, friend_id).first<any>()\n\n    if (!friendship) {\n      return jsonCORS(origin, { error: 'You can only challenge friends' }, 400)\n    }\n\n    const now = new Date().toISOString()\n    const endDate = new Date(Date.now() + duration_days * 24 * 60 * 60 * 1000).toISOString()\n\n    const challenge = await c.env.DB.prepare(`\n      INSERT INTO friend_challenges (\n        challenger_id, challenged_id, challenge_type, title, description,\n        target_value, points_reward, start_date, end_date, status, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'active', ?, ?)\n      RETURNING *\n    `).bind(\n      userId, friend_id, challenge_type, title, description,\n      target_value, points_reward, now, endDate, now, now\n    ).first<any>()\n\n    return jsonCORS(origin, { success: true, challenge })\n  } catch (e: any) {\n    console.error('Challenge creation error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to create challenge' }, 500)\n  }\n})\n\n// GET /api/challenges - Get user's challenges\napp.get('/api/challenges', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const challenges = await c.env.DB.prepare(`\n      SELECT \n        c.*,\n        challenger.email as challenger_email,\n        challenger_profile.full_name as challenger_name,\n        challenger_profile.profile_picture_url as challenger_avatar,\n        challenged.email as challenged_email,\n        challenged_profile.full_name as challenged_name,\n        challenged_profile.profile_picture_url as challenged_avatar\n      FROM friend_challenges c\n      LEFT JOIN users challenger ON c.challenger_id = challenger.id\n      LEFT JOIN user_profiles challenger_profile ON challenger.id = challenger_profile.user_id\n      LEFT JOIN users challenged ON c.challenged_id = challenged.id\n      LEFT JOIN user_profiles challenged_profile ON challenged.id = challenged_profile.user_id\n      WHERE (c.challenger_id = ? OR c.challenged_id = ?) AND c.status = 'active'\n      ORDER BY c.created_at DESC\n    `).bind(userId, userId).all<any>()\n\n    return jsonCORS(origin, { challenges: challenges.results || [] })\n  } catch (e: any) {\n    console.error('Challenges fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch challenges' }, 500)\n  }\n})\n\n// POST /api/challenges/:id/progress - Update challenge progress\napp.post('/api/challenges/:id/progress', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const challengeId = c.req.param('id')\n    const body = await c.req.json()\n    const { progress_value } = body\n\n    if (typeof progress_value !== 'number') {\n      return jsonCORS(origin, { error: 'Valid progress value required' }, 400)\n    }\n\n    const now = new Date().toISOString()\n\n    // Update progress for the user\n    const field = userId === (await c.env.DB.prepare(`SELECT challenger_id FROM friend_challenges WHERE id = ?`).bind(challengeId).first<any>())?.challenger_id\n      ? 'challenger_progress'\n      : 'challenged_progress'\n\n    const updated = await c.env.DB.prepare(`\n      UPDATE friend_challenges \n      SET ${field} = ?, updated_at = ?\n      WHERE id = ? AND (challenger_id = ? OR challenged_id = ?)\n      RETURNING *\n    `).bind(progress_value, now, challengeId, userId, userId).first<any>()\n\n    if (!updated) {\n      return jsonCORS(origin, { error: 'Challenge not found' }, 404)\n    }\n\n    // Check if challenge is completed\n    if (updated.challenger_progress >= updated.target_value || updated.challenged_progress >= updated.target_value) {\n      const winnerId = updated.challenger_progress >= updated.target_value ? updated.challenger_id : updated.challenged_id\n      \n      // Award points to winner\n      await c.env.DB.prepare(`\n        INSERT INTO user_stats (user_id, total_points, challenges_won)\n        VALUES (?, ?, 1)\n        ON CONFLICT(user_id) DO UPDATE SET\n          total_points = total_points + ?,\n          challenges_won = challenges_won + 1,\n          updated_at = ?\n      `).bind(winnerId, updated.points_reward, updated.points_reward, now).run()\n\n      // Mark challenge as completed\n      await c.env.DB.prepare(`\n        UPDATE friend_challenges \n        SET status = 'completed', winner_id = ?, updated_at = ?\n        WHERE id = ?\n      `).bind(winnerId, now, challengeId).run()\n    }\n\n    return jsonCORS(origin, { success: true, challenge: updated })\n  } catch (e: any) {\n    console.error('Challenge progress error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to update progress' }, 500)\n  }\n})\n\n// ================ CHAT SYSTEM ================\n\n// POST /api/chat/messages - Send a chat message\napp.post('/api/chat/messages', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { recipient_id, content, message_type = 'text' } = body\n\n    if (!recipient_id || !content?.trim()) {\n      return jsonCORS(origin, { error: 'Recipient and content are required' }, 400)\n    }\n\n    // Verify friendship exists\n    const friendship = await c.env.DB.prepare(`\n      SELECT 1 FROM friendships \n      WHERE ((user_id = ? AND friend_id = ?) OR (user_id = ? AND friend_id = ?))\n      AND status = 'accepted'\n    `).bind(userId, recipient_id, recipient_id, userId).first<any>()\n\n    if (!friendship) {\n      return jsonCORS(origin, { error: 'You can only message friends' }, 400)\n    }\n\n    const now = new Date().toISOString()\n    const message = await c.env.DB.prepare(`\n      INSERT INTO chat_messages (sender_id, recipient_id, content, message_type, created_at)\n      VALUES (?, ?, ?, ?, ?)\n      RETURNING *\n    `).bind(userId, recipient_id, content, message_type, now).first<any>()\n\n    return jsonCORS(origin, { success: true, message })\n  } catch (e: any) {\n    console.error('Chat message error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to send message' }, 500)\n  }\n})\n\n// GET /api/chat/messages/:friend_id - Get chat messages with a friend\napp.get('/api/chat/messages/:friend_id', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const friendId = c.req.param('friend_id')\n    const limit = parseInt(url.searchParams.get('limit') || '50')\n    const offset = parseInt(url.searchParams.get('offset') || '0')\n\n    const messages = await c.env.DB.prepare(`\n      SELECT \n        m.*,\n        sender.email as sender_email,\n        sender_profile.full_name as sender_name,\n        sender_profile.profile_picture_url as sender_avatar\n      FROM chat_messages m\n      LEFT JOIN users sender ON m.sender_id = sender.id\n      LEFT JOIN user_profiles sender_profile ON sender.id = sender_profile.user_id\n      WHERE \n        (m.sender_id = ? AND m.recipient_id = ?) OR \n        (m.sender_id = ? AND m.recipient_id = ?)\n      ORDER BY m.created_at DESC\n      LIMIT ? OFFSET ?\n    `).bind(userId, friendId, friendId, userId, limit, offset).all<any>()\n\n    // Mark messages as read\n    await c.env.DB.prepare(`\n      UPDATE chat_messages \n      SET read_at = CURRENT_TIMESTAMP\n      WHERE sender_id = ? AND recipient_id = ? AND read_at IS NULL\n    `).bind(friendId, userId).run()\n\n    return jsonCORS(origin, { messages: (messages.results || []).reverse() })\n  } catch (e: any) {\n    console.error('Chat messages fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch messages' }, 500)\n  }\n})\n\n// POST /api/user/status - Update user online status\napp.post('/api/user/status', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { status = 'online' } = body\n    const now = new Date().toISOString()\n\n    await c.env.DB.prepare(`\n      INSERT INTO user_stats (user_id, last_active, online_status)\n      VALUES (?, ?, ?)\n      ON CONFLICT(user_id) DO UPDATE SET\n        last_active = ?,\n        online_status = ?,\n        updated_at = ?\n    `).bind(userId, now, status, now, status, now).run()\n\n    return jsonCORS(origin, { success: true, status })\n  } catch (e: any) {\n    console.error('Status update error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to update status' }, 500)\n  }\n})\n\n// ================ LEADERBOARDS ================\n\n// GET /api/leaderboard - Get points leaderboard\napp.get('/api/leaderboard', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const type = url.searchParams.get('type') || 'global'\n    const limit = parseInt(url.searchParams.get('limit') || '20')\n\n    let query = `\n      SELECT \n        us.*,\n        up.name as full_name,\n        up.bio,\n        ROW_NUMBER() OVER (ORDER BY us.total_points DESC) as rank\n      FROM user_stats us\n      LEFT JOIN user_profiles up ON us.user_id = up.user_id\n    `\n\n    if (type === 'friends') {\n      query += `\n        WHERE us.user_id = ? OR EXISTS (\n          SELECT 1 FROM friendships f \n          WHERE ((f.requester_id = ? AND f.addressee_id = us.user_id) OR (f.addressee_id = ? AND f.requester_id = us.user_id))\n          AND f.status = 'accepted'\n        )\n      `\n    }\n\n    query += `\n      ORDER BY us.total_points DESC\n      LIMIT ?\n    `\n\n    const params = type === 'friends' ? [userId, userId, userId, limit] : [limit]\n    const leaderboard = await c.env.DB.prepare(query).bind(...params).all<any>()\n\n    return jsonCORS(origin, { leaderboard: leaderboard.results || [] })\n  } catch (e: any) {\n    console.error('Leaderboard fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch leaderboard' }, 500)\n  }\n})\n\n// POST /api/achievements/award - Award points for achievement (called by frontend when user completes something)\napp.post('/api/achievements/award', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  const auth = c.req.header('authorization') || ''\n  const url = new URL(c.req.url)\n  const qToken = url.searchParams.get('token') || ''\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : qToken\n  const user = await verifySupabaseToken(c.env, token)\n  // TEMPORARY: Use your real user ID for testing (REMOVE IN PRODUCTION)\n  const userId = user?.id || '136d84f0-d877-4c0c-b2f0-2e6270fcee9c'\n  if (!userId) return jsonCORS(origin, { error: 'Unauthorized' }, 401)\n\n  await ensureTables(c.env)\n\n  try {\n    const body = await c.req.json()\n    const { achievement_type, points = 10, description = '' } = body\n\n    if (!achievement_type) {\n      return jsonCORS(origin, { error: 'Achievement type is required' }, 400)\n    }\n\n    const now = new Date().toISOString()\n\n    // Award points\n    await c.env.DB.prepare(`\n      INSERT INTO user_stats (user_id, total_points, achievements_count)\n      VALUES (?, ?, 1)\n      ON CONFLICT(user_id) DO UPDATE SET\n        total_points = total_points + ?,\n        achievements_count = achievements_count + 1,\n        updated_at = ?\n    `).bind(userId, points, points, now).run()\n\n    // Create achievement post automatically\n    await c.env.DB.prepare(`\n      INSERT INTO social_posts (user_id, content, post_type, tags, visibility, created_at, updated_at)\n      VALUES (?, ?, 'achievement', ?, 'public', ?, ?)\n    `).bind(\n      userId,\n      `\uD83C\uDF89 Just completed: ${achievement_type}! ${description} (+${points} points)`,\n      JSON.stringify([achievement_type, 'achievement']),\n      now,\n      now\n    ).run()\n\n    return jsonCORS(origin, { \n      success: true, \n      points_awarded: points,\n      message: `Congratulations! You earned ${points} points for ${achievement_type}!`\n    })\n  } catch (e: any) {\n    console.error('Achievement award error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to award achievement points' }, 500)\n  }\n})\n\n// DEBUG: Test post creation without auth (REMOVE IN PRODUCTION)\napp.post('/api/debug/create-post', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  \n  try {\n    await ensureTables(c.env)\n    \n    const { content, postType } = await c.req.json()\n    const testUserId = '737774bcd-d0ba-4a5a-921e-a392df28df26'\n    \n    // Create post\n    const result = await c.env.DB.prepare(`\n      INSERT INTO social_posts (user_id, content, post_type, visibility, created_at, updated_at) \n      VALUES (?, ?, ?, ?, datetime('now'), datetime('now'))\n    `).bind(testUserId, content, postType || 'progress', 'friends').run()\n    \n    return jsonCORS(origin, {\n      success: true,\n      message: 'Post created successfully!',\n      post: {\n        id: result.meta?.last_row_id,\n        content,\n        post_type: postType || 'progress',\n        user_id: testUserId\n      }\n    })\n  } catch (e: any) {\n    console.error('Debug post creation error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to create post' }, 500)\n  }\n})\n\n// DEBUG: Get posts without auth (REMOVE IN PRODUCTION)  \napp.get('/api/debug/posts', async (c) => {\n  const origin = c.req.header('origin') || '*'\n  \n  try {\n    await ensureTables(c.env)\n    \n    const posts = await c.env.DB.prepare(`\n      SELECT p.*, up.name as user_name, up.bio\n      FROM social_posts p\n      LEFT JOIN user_profiles up ON p.user_id = up.user_id\n      ORDER BY p.created_at DESC\n      LIMIT 20\n    `).all()\n    \n    return jsonCORS(origin, {\n      success: true,\n      posts: posts.results || []\n    })\n  } catch (e: any) {\n    console.error('Debug posts fetch error:', e)\n    return jsonCORS(origin, { error: e?.message || 'Failed to fetch posts' }, 500)\n  }\n})\n\nexport default app\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/user/webapp/media-worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/user/webapp/media-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/user/webapp/media-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/user/webapp/media-worker/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/user/webapp/media-worker/.wrangler/tmp/bundle-DtnAdk/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/user/webapp/media-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/user/webapp/media-worker/.wrangler/tmp/bundle-DtnAdk/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/user/webapp/media-worker/.wrangler/tmp/bundle-DtnAdk/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["raw", "app", "Node", "Node", "Hono", "Hono", "userId", "c"]
}
